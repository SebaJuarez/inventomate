name: Inventomate

on:
  push:
    branches: ['feature/despliegue-nuevo']

jobs:
  build-images:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      

      

      
      - name: Build and push python api image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/apiPython
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/python-inventomate:latest


  deploy-apps:
    name: Deploy apps and services
    if: startsWith(github.event.head_commit.message, '(up)')
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #. ConfiguraciÃ³n CLI Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Google Cloud kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'

      - name: Check and Create Cluster if not exists
        run: |
          CLUSTER_NAME=inventomate-cluster
          CLUSTER_ZONE=us-east1-b
      
          if ! gcloud container clusters list --format="value(name)" | grep -q $CLUSTER_NAME; then
            echo "Cluster does not exist. Creating cluster..."
            gcloud container clusters create $CLUSTER_NAME --machine-type=e2-medium --zone=$CLUSTER_ZONE
          else
            echo "Cluster already exists."
          fi
          
          gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE
    
      - name: Set Kubernetes context
        run: |
          gcloud container clusters get-credentials inventomate-cluster --zone us-east1-b
          kubectl config use-context gke_inventomate-424520_us-east1-b_inventomate-cluster
          kubectl create namespace inventomate || echo " namespace already exists"
      

      - name: Create Aplication Config
        working-directory: ./kubernetes
        run: |
          kubectl apply -f app-config.yaml
          kubectl apply -f db-secrets.yaml
          kubectl apply -f front-config.yaml

      - name: MYSQL deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f init-mysql.yaml
          
          kubectl apply -f mysql.yaml

          sleep 12

      - name: PotgreSQL deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f init-postgresql.yaml
          
          kubectl apply -f postgresql.yaml
      
      - name: Mongo deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f mongo.yaml

      - name: Aplications Deploy python
        working-directory: ./kubernetes
        run: |
          kubectl apply -f python.yaml
         

      #kubectl create secret generic cloudflare-token-secret --from-literal=api-key=M8cw0_STDKr-qNdilJ1qdlmZIgdgfVDQqtpkZxj1


          

      #tiro sste comando dos veces para que se configure en webhook
      - name: Install cert-manager
        run: |
          kubectl create ns cert-manager || echo " namespace already exists"   
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml
          sleep 12
          kubectl create ns cert-manager || echo " namespace already exists"   
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml
          sleep 60
          

      - name: Apply cluster-issuer
        working-directory: ./kubernetes
        run: |
          kubectl apply -f cluster-issuer.yaml

      - name: Apply Ingress
        working-directory: ./kubernetes
        run: |
          kubectl apply -f ingress.yaml 
          for i in {1..30}; do
            status=$(kubectl get certificate -A -o jsonpath="{.items[?(@.metadata.name=='helloworld-http-tls')].status.conditions[?(@.type=='Ready')].status}")
            if [ "$status" == "True" ]; then
              echo "Certificate is ready."
              break
            fi
            echo "Waiting for certificate to be ready..."
            sleep 10
          done

          # If the loop completes without the certificate being ready, exit with an error
          if [ "$status" != "True" ]; then
            echo "Certificate was not ready in time." >&2
            exit 1
          fi

      - name: Generate TLS certificates PARA FRONTEND
        working-directory: ./client
        run: |
            kubectl get secret helloworld-http-tls -n inventomate -o=jsonpath='{.data.tls\.crt}' | base64 -d > tls.crt
            kubectl get secret helloworld-http-tls -n inventomate -o=jsonpath='{.data.tls\.key}' | base64 -d > tls.key
            ls -lah

      - name: Generate TLS certificates for Spring
        working-directory: ./backend/backend_spring
        run: |
          kubectl get secret helloworld-http-tls -n inventomate -o=jsonpath='{.data.tls\.crt}' | base64 -d > tls.crt
          kubectl get secret helloworld-http-tls -n inventomate -o=jsonpath='{.data.tls\.key}' | base64 -d > tls.key
          ls -lah
          
          # Convert tls.crt and tls.key to keystore.p12
          openssl pkcs12 -export -in tls.crt -inkey tls.key -out keystore.p12 -name myalias -passout pass:yourpassword
      
          ls -lah

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
            context: ./client
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/frontend-inventomate:latest
      
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./backend/backend_spring/mvnw

      - name: Build with Maven
        working-directory: ./backend/backend_spring
        run: ./mvnw clean package -DskipTests
    
      - name: Build and push spring image
        uses: docker/build-push-action@v5
        with:
            context: ./backend/backend_spring
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/spring-inventomate:latest
            
      - name: Crear pod backend
        working-directory: ./kubernetes
        run: |
            kubectl apply -f spring.yaml
      - name: Crear pod frontend
        working-directory: ./kubernetes
        run: |
            kubectl apply -f frontend.yaml

      #Espera que este la ip en el load balancer y luego la imprime
      - name: Wait for Spring Load Balancer IP
        id: wait-for-sp-lb-ip
        run: |
          SERVICE_NAME=spring-inventomate
          NAMESPACE=inventomate
          EXPECTED_IP=34.148.152.120
          MAX_ATTEMPTS=10
          INTERVAL=10
          COUNT=0

          while [ "$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')" != "$EXPECTED_IP" ] && [ $COUNT -lt $MAX_ATTEMPTS ]; do
            echo "Waiting for external IP..."
            sleep $INTERVAL
            COUNT=$((COUNT+1))
          done

          if [ $COUNT -eq $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for external IP"
            exit 1
          else
            LOAD_BALANCER_IP=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Load Balancer IP: $LOAD_BALANCER_IP"
            echo "::set-output name=load_balancer_ip::$LOAD_BALANCER_IP"
          fi

      #Espera a que este  la ip en el load balancer y luego la imprime
      - name: Wait for Frontend Load Balancer IP
        id: wait-for-lb-ip
        run: |
          SERVICE_NAME=frontend-inventomate
          NAMESPACE=inventomate
          EXPECTED_IP=35.227.28.109
          MAX_ATTEMPTS=10
          INTERVAL=10
          COUNT=0

          while [ "$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')" != "$EXPECTED_IP" ] && [ $COUNT -lt $MAX_ATTEMPTS ]; do
            echo "Waiting for external IP..."
            sleep $INTERVAL
            COUNT=$((COUNT+1))
          done

          if [ $COUNT -eq $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for external IP"
            exit 1
          else
            LOAD_BALANCER_IP=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Load Balancer IP: $LOAD_BALANCER_IP"
            echo "::set-output name=load_balancer_ip::$LOAD_BALANCER_IP"
          fi

      - name: Execute MySQL commands
        run: |
          POD_NAME=$(kubectl get pods -n inventomate -l app=mysql -o jsonpath="{.items[0].metadata.name}")
          kubectl exec -n inventomate $POD_NAME -- mysql -u root -e "
          SET @fecha_actual = '2024-06-04';

          DELIMITER //

          CREATE PROCEDURE InsertHistoricalData()
          BEGIN
              DECLARE v_counter INT DEFAULT 0;
              DECLARE v_fecha DATE;
              DECLARE v_categoria1_id BIGINT;
              DECLARE v_categoria2_id BIGINT;

              SET v_fecha = @fecha_actual;
              
              SET v_categoria1_id = 1;
              SET v_categoria2_id = 2;

              WHILE v_counter < 12 DO
                  INSERT INTO productos_meli (id_meli, trend_position, fecha, nombre, precio, divisa, id_categoria) VALUES
                  ('MLA21024384', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Samsung Galaxy A04 128 GB Negro 4 GB RAM', 264999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA22385548', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Samsung Galaxy A34 128GB Awesome Graphite 6GB RAM', 695999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA19069553', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Xiaomi Redmi 10c Dual Sim 128gb 4gb Ram Gris grafito', 269999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA19069554', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Xiaomi Redmi 10c Dual Sim 128gb 4gb Ram Ocean Blue', 269999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA22385547', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Samsung Galaxy A34 128gb 6gb Ram Awesome Silver', 500000 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA26862371', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Zte Blade A53 Plus 2GB Gris oscuro Ram 64 GB', 145999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA27440592', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Motorola Moto G84 5G 256 GB Negro espacial 8 GB RAM', 469999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA24521863', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'TCL 40 SE 128 GB twilight purple 4 GB RAM', 249999 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA28131664', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Xiaomi Redmi 13C Dual SIM 256 GB Midnight Black 8 GB RAM', 278990 * (1 + RAND()), 'ARS', v_categoria1_id),
                  ('MLA26862373', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Zte Blade A33 Plus 32 GB Space Gray 2 GB RAM', 129999 * (1 + RAND()), 'ARS', v_categoria1_id);

                  INSERT INTO productos_meli (id_meli, trend_position, fecha, nombre, precio, divisa, id_categoria) VALUES
                  ('MLA27706172', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Hp 255 G9 R5 5625u 8gb Ssd 256gb 15.6 W11h Ct Color Gris ceniza', 749999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA22826188', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Exo Smart T38 Intel N4020 4gb Ssd128gb Windows 11 Color Gris', 399999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA19667501', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Exo Smart R33 Intel N4020 4gb Ssd 64 Gb Windows 11 Color Gris', 359999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA29590978', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Lenovo Ideapad 1 4gb 128gb 14 Intel Celeron W11 Color Plateado', 560999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA21263733', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Cx 27000w, Conectividad 4g Lte Con Chip De Celular , 128gb Ssd , 4gb Ram, 14.1 1366 Px X 768 Px , Qualcomm Sc7180 2.4ghz, Gpu Adreno 618, Windows 10 Pro', 313999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA26696118', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Asus X515EA slate grey 15.6", Intel Core i3 1115G4 8GB de RAM 256GB SSD, GrÃ¡ficos Intel UHD 1366x768px FreeDOS', 802998.9 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA23376685', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Dell Inspiron 3525 plata 15.5", AMD Ryzen 5 5500U 8GB de RAM 512GB SSD, AMD Radeon RX Vega 7 120 Hz 1920x1080px Windows 11 Home', 1210999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA26314185', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Asus X515EA slate grey 15.6", Intel Core i7 1165G7 40GB de RAM 1TB SSD, Intel Iris Xe Graphics 60 Hz 1920x1080px FreeDOS', 1290000 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA27961100', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Asus Ultra Thin L510MA star black 15.6", Intel Pentium Silver N5030 4GB de RAM 128GB SSD, Intel UHD Graphics 605 60 Hz 1920x1080px Windows 11 Home', 719999 * (1 + RAND()), 'ARS', v_categoria2_id),
                  ('MLA18500496', 1 + FLOOR(10 * RAND()), DATE_SUB(v_fecha, INTERVAL v_counter MONTH), 'Notebook Asus X515EA gris 15.6", Intel Core i5 1135G7 8GB de RAM 256GB SSD, Intel Iris Xe Graphics G7 80EUs 1920x1080px FreeDOS', 864919 * (1 + RAND()), 'ARS', v_categoria2_id);

                  SET v_counter = v_counter + 1;
              END WHILE;
          END //

          DELIMITER ;

          CALL InsertHistoricalData();"