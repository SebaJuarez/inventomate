name: Inventomate

on:
  push:
    branches: ['feature/despliegue']

jobs:
  build-images:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./backend/backend_spring/mvnw

      - name: Build with Maven
        working-directory: ./backend/backend_spring
        run: ./mvnw clean package -DskipTests

      - name: Build and push spring image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/backend_spring
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-inventomate:latest

      - name: Build and push python api image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/apiPython
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/python-inventomate:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend-inventomate:latest


  deploy-apps:
    name: Deploy apps and services
    # if: startsWith(github.event.head_commit.message, '(up)')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configuración CLI Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Google Cloud kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'

      # Verificar si el clúster ya está creado
      - name: Check if cluster exists
        id: check-cluster
        run: |
          gcloud container clusters list --format="value(name)" | grep -q inventomate-cluster || echo "Cluster does not exist"
        continue-on-error: true

      # Crear el clúster si no existe
      - name: Create Cluster if not exists
        if: steps.check-cluster.outcome == 'failure'
        run: |
          gcloud container clusters create --machine-type=e2-medium --zone=us-east1-b inventomate-cluster
          gcloud container clusters get-credentials inventomate-cluster --zone us-east1-b

      - name: Create Aplication Config
        working-directory: ./kubernetes
        run: |
          kubectl apply -f app-config.yaml
          kubectl apply -f db-secrets.yaml

      - name: MYSQL deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f init-mysql.yaml
          
          kubectl apply -f mysql.yaml

          sleep 120

      - name: PotgreSQL deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f init-postgresql.yaml
          
          kubectl apply -f postgresql.yaml
      
      - name: PotgreSQL deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f mongo.yaml

      - name: Aplications Deploy
        working-directory: ./kubernetes
        run: |
          kubectl apply -f spring.yaml
          kubectl apply -f python.yaml
          kubectl apply -f frontend.yaml

      - name: Get Load Balancer IP
        id: get-lb-ip
        run: |
          retries=0
          while [ $retries -lt 5 ]; do
            LOAD_BALANCER_IP=$(kubectl get services frontend-inventomate -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$LOAD_BALANCER_IP" ]; then
              echo "Load Balancer IP: $LOAD_BALANCER_IP"
              echo "::set-output name=load_balancer_ip::$LOAD_BALANCER_IP" # Establecer la variable de salida
              break
            else
              echo "Waiting for Load Balancer IP..."
              sleep 30
              retries=$((retries+1))
            fi
          done

      - name: Update Auth0 Firewall Rule
        run: |
          # Obtener token de acceso de Auth0
          AUTH0_DOMAIN="dev-xzd1nw16hc11vsj7.us.auth0.com"
          AUTH0_CLIENT_ID="ms0lq4fkONnpPrvn6LA29q5sk14h1ehE"
          AUTH0_CLIENT_SECRET="x1hTArWi-WwhMg7jKAlUsfwVIiAoV76QJc0wo_PqqqAXPB8wX0RyFW0hD53GE7Pg"

          TOKEN=$(curl --request POST \
            --url "https://${AUTH0_DOMAIN}/oauth/token" \
            --header 'content-type: application/json' \
            --data "{\"client_id\":\"${AUTH0_CLIENT_ID}\",\"client_secret\":\"${AUTH0_CLIENT_SECRET}\",\"audience\":\"https://${AUTH0_DOMAIN}/api/v2/\",\"grant_type\":\"client_credentials\"}" \
            --silent | jq -r '.access_token')

          # Obtener IP del Load Balancer del servicio frontend-inventomate
          LOAD_BALANCER_IP=$(echo ${{ steps.get_lb_ip.outputs.load_balancer_ip }})

          # Actualizar regla de firewall en Auth0 con la dirección IP obtenida
          curl --request POST \
            --url "https://${AUTH0_DOMAIN}/api/v2/firewall/rules" \
            --header "content-type: application/json" \
            --header "Authorization: Bearer ${TOKEN}" \
            --data "{\"ip\": \"${LOAD_BALANCER_IP}\"}"
