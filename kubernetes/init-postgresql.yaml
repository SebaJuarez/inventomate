apiVersion: v1
kind: ConfigMap
metadata:
  name: init-postgresql
  namespace: inventomate
data:
  init.sql: |
    -- Crear tabla de sucursales
    CREATE TABLE SUCURSAL (
        sucursal_id INTEGER PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL
    );

    -- Crear tabla de categorías
    CREATE TABLE CATEGORIA (
        categoria_id INTEGER PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL
    );

    -- Crear tabla de productos
    CREATE TABLE PRODUCTO (
        producto_id INTEGER PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        descripcion VARCHAR(100),
        categoria_id INTEGER,
        FOREIGN KEY (categoria_id) REFERENCES CATEGORIA(categoria_id)
    );

    -- Crear tabla intermedia para la relación muchos a muchos entre sucursal y producto
    CREATE TABLE sucursal_producto (
        sucursal_id INTEGER,
        producto_id INTEGER,
        stock INTEGER NOT NULL,
        precio_venta DOUBLE PRECISION NOT NULL,
        PRIMARY KEY (sucursal_id, producto_id),
        FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(sucursal_id),
        FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
    );

    -- Crear tabla de compras
    CREATE TABLE compra (
        id SERIAL PRIMARY KEY, -- Utiliza SERIAL para que la columna id sea autoincremental
        sucursal_id INTEGER NOT NULL,
        fecha_hora TIMESTAMP,
        total DOUBLE PRECISION NOT NULL,
        FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(sucursal_id)
    );

    -- Crear tabla de detalles de compra
    CREATE TABLE detalle_compra (
        id SERIAL PRIMARY KEY, -- Utiliza SERIAL para que la columna id sea autoincremental
        compra_id INTEGER NOT NULL,
        producto_id INTEGER NOT NULL,
        cantidad INTEGER NOT NULL,
        precio_compra DOUBLE PRECISION NOT NULL,
        subtotal DOUBLE PRECISION NOT NULL,
        FOREIGN KEY (compra_id) REFERENCES compra(id),
        FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
    );

    -- Crear tabla de ventas
    CREATE TABLE venta (
        id SERIAL PRIMARY KEY, -- Utiliza SERIAL para que la columna id sea autoincremental
        sucursal_id INTEGER NOT NULL,
        fecha_hora TIMESTAMP,
        total DOUBLE PRECISION NOT NULL,
        FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(sucursal_id)
    );

    -- Crear tabla de detalles de venta
    CREATE TABLE detalle (
        id SERIAL PRIMARY KEY, -- Utiliza SERIAL para que la columna id sea autoincremental
        venta_id INTEGER NOT NULL,
        producto_id INTEGER NOT NULL,
        cantidad INTEGER NOT NULL,
        precio_venta DOUBLE PRECISION NOT NULL,
        subtotal DOUBLE PRECISION NOT NULL,
        promo INTEGER,
        FOREIGN KEY (venta_id) REFERENCES venta(id),
        FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
    );

    -- Insertar datos en la tabla de sucursales (asumiendo que ya existen dos sucursales con ID 1 y 2)
    INSERT INTO SUCURSAL (sucursal_id, nombre) VALUES 
    (1, 'Sucursal A'),
    (2, 'Sucursal B');

    -- Insertar datos en la tabla de categorías (asumiendo que ya existen categorías con ID 1 y 2)
    INSERT INTO CATEGORIA (categoria_id, nombre) VALUES 
    (1, 'Notebooks'),
    (2, 'iPhones');

    -- Insertar productos (notebooks) en la tabla de productos
    INSERT INTO PRODUCTO (producto_id, nombre, descripcion, categoria_id) VALUES 
    (1, 'Notebook Dell XPS 13', 'Descripción del Dell XPS 13', 1),
    (2, 'Notebook HP Spectre x360', 'Descripción del HP Spectre x360', 1),
    (3, 'Notebook Lenovo ThinkPad X1 Carbon', 'Descripción del ThinkPad X1 Carbon', 1),
    (4, 'Notebook Apple MacBook Pro', 'Descripción del MacBook Pro', 1),
    (5, 'Notebook Asus ZenBook', 'Descripción del Asus ZenBook', 1),
    (6, 'Notebook Microsoft Surface Laptop', 'Descripción del Surface Laptop', 1),
    (7, 'Notebook Acer Swift 5', 'Descripción del Acer Swift 5', 1),
    (8, 'Notebook Samsung Galaxy Book Flex', 'Descripción del Galaxy Book Flex', 1),
    (9, 'Notebook Huawei MateBook X Pro', 'Descripción del MateBook X Pro', 1),
    (10, 'Notebook LG Gram', 'Descripción del LG Gram', 1);

    -- Insertar productos (iPhones) en la tabla de productos
    INSERT INTO PRODUCTO (producto_id, nombre, descripcion, categoria_id) VALUES 
    (11, 'iPhone 13 Pro', 'Descripción del iPhone 13 Pro', 2),
    (12, 'iPhone 13', 'Descripción del iPhone 13', 2),
    (13, 'iPhone 13 mini', 'Descripción del iPhone 13 mini', 2),
    (14, 'iPhone 13 Pro Max', 'Descripción del iPhone 13 Pro Max', 2),
    (15, 'iPhone 12 Pro', 'Descripción del iPhone 12 Pro', 2),
    (16, 'iPhone 12', 'Descripción del iPhone 12', 2),
    (17, 'iPhone 12 mini', 'Descripción del iPhone 12 mini', 2),
    (18, 'iPhone 12 Pro Max', 'Descripción del iPhone 12 Pro Max', 2),
    (19, 'iPhone SE', 'Descripción del iPhone SE', 2),
    (20, 'iPhone 11', 'Descripción del iPhone 11', 2);

    -- Insertar productos en la tabla intermedia sucursal_producto para cada sucursal con stock y precio_venta aleatorios
    INSERT INTO sucursal_producto (sucursal_id, producto_id, stock, precio_venta)
    SELECT s.sucursal_id, p.producto_id, 
        CASE 
            WHEN p.producto_id IN (1, 5, 7, 15, 18, 20) THEN (TRUNC(RANDOM() * 1000) + 100)::int -- Stock mucho más alto para productos específicos que no se venden
            ELSE (TRUNC(RANDOM() * 100) + 1)::int -- Stock aleatorio entre 1 y 100 para otros productos
        END AS stock,
        CASE 
            WHEN p.categoria_id = 1 THEN ROUND((RANDOM() * 800000 + 700000)::numeric, 2) -- Precio de venta aleatorio entre 700000 y 1500000 con dos decimales para "notebooks"
            WHEN p.categoria_id = 2 THEN ROUND((RANDOM() * 400000 + 600000)::numeric, 2) -- Precio de venta aleatorio entre 600000 y 1000000 con dos decimales para "iPhones"
        END AS precio_venta
    FROM SUCURSAL s
    CROSS JOIN PRODUCTO p
    WHERE p.categoria_id IN (1, 2); -- Selección de productos de las categorías "notebooks" (ID 1) e "iPhones" (ID 2)

    -- Insertar datos ficticios de compras
    WITH dates AS (
        SELECT generate_series(
            DATE_TRUNC('YEAR', CURRENT_DATE - INTERVAL '1 YEAR'),
            CURRENT_DATE,
            INTERVAL '1 day'
        )::DATE AS fecha
    ),
    compra_data AS (
        INSERT INTO compra (sucursal_id, fecha_hora, total)
        SELECT 
            1 AS sucursal_id,
            fecha,
            0 AS total -- Total inicial como 0, se actualizará después
        FROM dates
        RETURNING id, fecha_hora
    ),
    detalle_data AS (
        INSERT INTO detalle_compra (compra_id, producto_id, cantidad, precio_compra, subtotal)
        SELECT
            c.id AS compra_id,
            sp.producto_id,
            ROUND(random() * 20) + 1 AS cantidad, -- Cantidad entre 1 y 20
            ROUND((sp.precio_venta * (1 - (random() * 0.2 + 0.1)))::numeric, 2) AS precio_compra, -- Precio de compra entre 10% y 30% menos que el precio de venta
            ROUND(((ROUND(random() * 20) + 1) * (sp.precio_venta * (1 - (random() * 0.2 + 0.1)))::numeric)::numeric, 2) AS subtotal -- Subtotal calculado acorde al precio de compra y cantidad
        FROM compra_data c
        CROSS JOIN sucursal_producto sp
        RETURNING compra_id, subtotal
    ),
    totales AS (
        SELECT compra_id, SUM(subtotal) AS total
        FROM detalle_data
        GROUP BY compra_id
    )
    -- Actualizar el total en la tabla de compra
    UPDATE compra c
    SET total = t.total
    FROM totales t
    WHERE c.id = t.compra_id;
    -- Insertar datos ficticios de ventas
    WITH dates AS (
        SELECT generate_series(
            DATE_TRUNC('YEAR', CURRENT_DATE - INTERVAL '1 YEAR'),
            CURRENT_DATE,
            INTERVAL '1 day'
        )::DATE AS fecha
    ),
    productos_no_vendidos AS (
        SELECT unnest(ARRAY[1, 5, 7, 15, 18, 20]) AS producto_id
    ),
    venta_data AS (
        INSERT INTO venta (sucursal_id, fecha_hora, total)
        SELECT 
            1 AS sucursal_id,
            fecha,
            0 AS total -- Total inicial como 0, se actualizará después
        FROM dates
        RETURNING id, fecha_hora
    ),
    detalle_data AS (
        INSERT INTO detalle (venta_id, producto_id, cantidad, precio_venta, subtotal, promo)
        SELECT
            v.id AS venta_id,
            sp.producto_id,
            CASE
                WHEN pv.producto_id IS NOT NULL AND v.fecha_hora >= CURRENT_DATE - INTERVAL '2 months' THEN 0
                WHEN pv.producto_id IS NOT NULL THEN ROUND(random() * 10) + 1 -- Venta normal si no es un producto no vendido reciente
                ELSE ROUND(random() * 5) + 1 -- Venta normal reducida en 50% para productos no en la lista de no vendidos
            END AS cantidad,
            CASE
                WHEN p.categoria_id = 1 THEN ROUND((random() * (1500000 - 700000) + 700000)::numeric, 2) -- Precio de venta entre 700,000 y 1,500,000 para notebooks
                WHEN p.categoria_id = 2 THEN ROUND((random() * (1000000 - 600000) + 600000)::numeric, 2) -- Precio de venta entre 600,000 y 1,000,000 para iPhones
            END AS precio_venta,
            CASE
                WHEN p.categoria_id = 1 THEN ROUND((random() * 5 + 1)::numeric * (random() * (1500000 - 700000) + 700000)::numeric, 2) -- Subtotal calculado acorde a notebooks
                WHEN p.categoria_id = 2 THEN ROUND((random() * 5 + 1)::numeric * (random() * (1000000 - 600000) + 600000)::numeric, 2) -- Subtotal calculado acorde a iPhones
            END AS subtotal,
            FLOOR(random() * 101) AS promo -- Generar un nÃºmero entero entre 0 y 100
        FROM venta_data v
        CROSS JOIN sucursal_producto sp
        JOIN producto p ON sp.producto_id = p.producto_id
        LEFT JOIN productos_no_vendidos pv ON sp.producto_id = pv.producto_id
        RETURNING venta_id, subtotal
    ),
    totales AS (
        SELECT venta_id, SUM(subtotal) AS total
        FROM detalle_data
        GROUP BY venta_id
    )
    -- Actualizar el total en la tabla de venta
    UPDATE venta v
    SET total = t.total
    FROM totales t
    WHERE v.id = t.venta_id;